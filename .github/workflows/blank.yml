# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
  #  branches: [ main ]
  #pull_request:
  #  branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
        
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-2019 # windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      #- uses: actions/checkout@v2
      
      - name: configure remote desktop
        shell: powershell
        run: |
          #netsh int tcp set global ecncapability=disabled
          netsh interface tcp set global autotuninglevel=disabled
          netsh interface tcp show global
          
          #New-ItemProperty -Name bEnumerateHWBeforeSW -PropertyType DWord -Value 1 -Path Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\"Windows NT"\"Terminal Services"
          #Get-ItemProperty -Name bEnumerateHWBeforeSW -Path Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\"Windows NT"\"Terminal Services"
          
          New-ItemProperty -Name DWMFRAMEINTERVAL -PropertyType DWord -Value 15 -Path Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\"Terminal Server"\WinStations
          Get-ItemProperty -Name DWMFRAMEINTERVAL -Path Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\"Terminal Server"\WinStations
          
          echo ${env:PATH}
          whoami
          Get-LocalUser
          $UserName = "runneradmin"
          $Password = "${{ secrets.PASSWD }}"
          $Password = ConvertTo-SecureString $Password -AsPlainText -Force
          $UserAccount = Get-LocalUser -Name $UserName
          $UserAccount | Set-LocalUser -Password $Password
          
          taskkill /im explorer.exe /f
          start "C:\WINDOWS\explorer.exe"
      - name: start remote desktop
        shell: powershell
        run: |
          (gwmi -class win32_terminalservicesetting -namespace "root\cimv2\terminalservices").setallowtsconnections(1)
          Get-NetFirewallRule -Name RemoteDesktop* | select DisplayName,Direction,Enabled 
          Get-NetFirewallRule -Name RemoteDesktop* | Set-NetFirewallRule -Enabled true
          
      - name: install tap adapter driver
        shell: powershell
        run: |
          $client = new-object System.Net.WebClient
          
          $file_url = "https://swupdate.openvpn.net/as/clients/openvpn-connect-2.7.1.111_signed.msi"
          $file_name = "openvpn-connect-2.7.1.111_signed.msi"
          $client.DownloadFile($file_url, $file_name)
          cp openvpn-connect-2.7.1.111_signed.msi C:\Windows\system32
          
      - name: install n2n
        shell: powershell
        run: |
          $client = new-object System.Net.WebClient
          $file_url = "https://github.com/ntop/n2n/archive/refs/heads/2.8-stable.zip"
          $file_name = "2.8-stable.zip"
          $client.DownloadFile($file_url, $file_name)
          Expand-Archive -Path $file_name .
          cd n2n-2.8-stable
          md build
          cd build
          cmake .. -G "Visual Studio 16 2019" -A Win32 -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release
          cp .\Release\edge.exe C:\Windows\system32
          ls .\Release\
          
          echo 'set ws=CreateObject("Wscript.Shell")' > C:\Windows\system32\n2n_auto_startup.vbs
          echo 'Wscript.sleep 5000' >> C:\Windows\system32\n2n_auto_startup.vbs
          echo 'a = ws.run ("edge.exe -a ${{ secrets.N2N_IP }} -c ${{ secrets.N2N_COMMUNITY }} -l ${{ secrets.N2N_HOST }}:${{ secrets.N2N_PORT }}",0)' >> C:\Windows\system32\n2n_auto_startup.vbs
          cat C:\Windows\system32\n2n_auto_startup.vbs
          
      - name: start n2n sshd and sleep
        shell: powershell
        run: |
          start-job -scriptblock {openvpn-connect-2.7.1.111_signed.msi /quiet}
          sleep 20
          start-job -scriptblock {n2n_auto_startup.vbs}
        
          Set-Service -Name wuauserv -StartupType Manual
          Start-Service -name wuauserv
          Get-WindowsCapability -Online | ? Name -like 'OpenSSH*'
          Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0
          Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
          Start-Service sshd
          Set-Service -Name sshd -StartupType 'Automatic'
          Get-NetFirewallRule -Name *ssh*
          New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
          Get-NetFirewallRule -Name *ssh*
          
          #sleep can not put in a new task, because this task which has sart-job can not be end
          sleep 19800
